---
title: "An introduction to network analysis"
format: live-html
resources:
  - data/lazega_lawyers
webr: 
  packages:
    - tidyverse
    - dplyr
    - network
    - igraph
    - sna
    - statnet
    - tidygraph
    - ggraph
    - ggplot2
    - sand
bibliography: references.bib
csl: amj.csl
---

```{r echo = FALSE}
# The sand package which has the Lazega data is not super up to date, so in the future, we might have to replace this with having the data directly in there, as for Python.
```

This pages uses the data from @lazega2001 to demonstrate some simple social network measurements. I use CSVs in this example to demonstrate how one load and wrangle the data before analysis, but the data is also available in a ready to analyse format in the `sand` package for R.

# Loading data

::: {.panel-tabset group="language"}
# R

```{webr}
adv <- read_delim("data/lazega_lawyers/ELadv.dat", delim = " ", col_names = FALSE)

adv <- adv |> 
  select(-X1)

adv <- as.matrix(adv)

#Attributes

#att <- read_delim("data/lazega_lawyers/ELattr.dat", delim = " ", col_names = FALSE, trim_ws = TRUE,   skip_empty_rows = TRUE)

att <- read_table("data/lazega_lawyers/ELattr.dat", 
                  col_names = c(" seniority", "status", "gender", "office", "tenure", "age",
                                "practice", "law_school"), 
                  col_types = cols(.default = col_integer()))

```

The warning we get when loading the attributes data using R is because the 4th row of this datafile has a trailing whitespace which read_table (or read_delim, had we used this function) interprets as a ninth column.

# Python

```{pyodide}
import pandas as pd
import numpy as np

# Load the adjacency matrix (ELadv.dat)
adv = pd.read_csv("data/lazega_lawyers/ELadv.dat", sep=r'\s+', header=None)

# Drop the first column (equivalent to select(-X1) in R)
adv = adv.drop(columns=0)

# Convert to a NumPy matrix
adv = adv.to_numpy()

# Load the attributes (ELattr.dat)
column_names = [
    "seniority", "status_c", "gender_c", "office_c",
    "tenure", "age", "practice_c", "law_school_c"
]

att = pd.read_csv("data/lazega_lawyers/ELattr.dat", sep=r'\s+', header=None, names=column_names)

# We need to convert string (columns with leading 0s) to integers
cols_to_int = [
    "status_c", "gender_c", "office_c",
    "practice_c", "law_school_c"
]

att[cols_to_int] = att[cols_to_int].astype(int)
```
:::

# Recoding the data

The data is numerically coded, making it difficult to read by a human. Let's make our life easier by recoding the data.

::: {.panel-tabset group="language"}
# R

```{webr}

att <- att |> 
  mutate(
         status = recode(status, `1` = "partner", `2` = "associate", `3` = "paralegal", `4` = "other"),
         gender = recode(gender, `1` = "man", `2` = "woman"),
         office = recode(office, `1` = "Boston", `2` = "Hartford", `3` = "Providence"),
         practice = recode(practice, `1` = "litigation", `2` = "corporate"),
         law_school = recode(law_school, `1` = "Harvard or Yale", `2` = "Ucon", `3` = "other")
         )

```

# Python

```{pyodide}
att = att.assign(
    status = att["status_c"].map({
        1: "partner",
        2: "associate"
    }),
    gender = att["gender_c"].map({
        1: "man",
        2: "woman"
    }),
    office = att["office_c"].map({
        1: "Boston",
        2: "Hartford",
        3: "Providence"
    }),
    practice = att["practice_c"].map({
        1: "litigation",
        2: "corporate"
    }),
    law_school = att["law_school_c"].map({
        1: "Harvard or Yale",
        2: "Ucon",
        3: "other"
    })
)

att = att.drop(columns=[
    "status_c", "gender_c", "office_c", "practice_c", "law_school_c"
])
```
:::


# Creating the network

The adjacency matrix is a square matrix used to represent a directed graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph.


::: {.panel-tabset group="language"}
# R

```{webr}
library(igraph)

lazega <- igraph::graph_from_data_frame(adv, mode = "directed", 
                                        vertices = att)

summary(lazega)

```

# Python

```{pyodide}
import igraph as igraph

lazega = igraph.Graph.data.frame(adv, mode="directed", vertices = att)

igraph.summary(lazega)

```
:::

# Visualising the network

::: {.panel-tabset group="language"}

# R

```{webr}
library(ggraph)

library(tidygraph)

lazega_tidy <- lazega |> 
  as_tbl_graph()

ggraph(lazega_tidy, layout = "fr") +
  geom_edge_link(aes(edge_alpha = weight), show.legend = FALSE) +
  geom_node_point(aes(color = status), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE) +
  theme_graph() +
  labs(title = "Lazega lawyers network")

```

# Python

```{pyodide}


```


# Some descriptive statistics

We can compute some basic statistics on the network. The following are some of the most common ones:



::: {.panel-tabset group="language"}
# R

```{webr}
mean_distance(lazega)

transitivity(lazega)

diameter(lazega)

igraph::assortativity(lazega, igraph::degree(lazega))
igraph::assortativity(lazega, igraph::degree(lazega, mode = "out"))
igraph::assortativity(lazega, igraph::degree(lazega, mode = "in"))

igraph::degree(lazega)
igraph::degree(lazega, mode = "out")
igraph::degree(lazega, mode = "in")

igraph::betweenness(lazega)
```

# Python

```{pyodide}
for x in range(1, 6):
  print(10 + x)
```
:::
